# github.com/SanjayVyas

function svish_directory_init
    set -g directory_decorator
    set -g svish_style_map "simple:simple_path full:full_path short:short_path trail:trail_path middle:middle_path"
end

function svish_directory

    set body "$segment_directory"

    # Are we in home directory or elsewhere
    if string match -eq $HOME (pwd)
        set folder_icon $home_folder_icon
        set -g directory_decorator $directory_home_decorator
    else
        set folder_icon $root_folder_icon
        set -g directory_decorator $directory_root_decorator
    end

    # Poor man's lookup map
    
    set style_generator ([ $directory_style = "cycle" ] && echo "cycle_path" || lookup $directory_style $style_map)
    [ -z $style_generator ] && set style_generator full_path

    set path_style (call $style_generator (pwd))
    set body (string trim (replace_placeholder 'path' "$path_style" "$body"))

    # Do we show permissions - 👤rwx?
    set body (expand_placeholder 'perm' (permissions_that_apply_to_me) "$body" "$directory_perm")

    # Check if we are to show directory details like number of dirs, files, etc.
    if show $directory_details

        # Get count of each type of file
        set dir_list (ls -l | string collect)
        set dirs_count (get_count "$dir_list" '^d')
        set files_count (get_count "$dir_list" '^-')
        set pipes_count (get_count "$dir_list" '^p')
        set links_count (get_count "$dir_list" '^l')
        set devices_count (get_count "$dir_list" '^c|^b')
        set sockets_count (get_count "$dir_list" '^s')

        # Loop thru each type of file, replacing the placeholder in the string
        set total_count 0
        for placeholder in dirs files links pipes sockets devices
            set placeholder_count {$placeholder}_count

            # Check individual flags whether to show the element
            set visible directory_{$placeholder}
            set body (expand_placeholder "$placeholder" $$placeholder_count $body $$visible )
            set total_count (math $total_count + $$placeholder_count)
        end

        # If there were no files in the dir, remove the trailing 
        [ $total_count -eq 0 ] && set body (string replace -r '.*' '' $body )
    else
        set body (string replace -r '┃.*' '' $body )
    end
    printf "$folder_icon$body"
end

function get_count
    echo (count (echo "$argv[1]" | grep -E $argv[2]))
end

function permissions_that_apply_to_me
    set dir_details (ls -ld . | tr -s ' ')
    set dir_owner (echo $dir_details | cut -d ' ' -f3)
    set dir_group (echo $dir_details | cut -d ' ' -f4)
    set current_owner (whoami)

    if [ "$dir_owner" = $current_owner ]
        set permissions $owner_icon (echo $dir_details| cut -c2-4)
    else if string match -e $dir_group (groups $current_owner) &>/dev/null
        set permissions $group_icon (echo $dir_details | cut -c5-7)
    else
        set permissions $world_icon (echo $dir_details | cut -c8-10)
    end

    printf "$permissions"
end

function simple_path
    set body "$argv"
    printf "%s" "$body"
end

function full_path
    set separator (get_value "$directory_separator")
    set initial (string match -eq $HOME $argv && echo $HOME || echo '/')
    set path (string replace "$initial" "" "$argv")
    set body (string replace -a '/' "$separator" "$path")
    printf "%s" "$body"
end

function short_path
    set path (string replace $HOME '~' $argv)
    set pathlets (string trim (string split '/' $path))
    set dir $pathlets[-1]
    set --erase pathlets[-1]

    set body ''
    for each in $pathlets
        set how_many ( [ (string sub -s 1 -e 1 $each) = "." ] && echo 2 || echo 1)
        set body $body(string sub -s 1 -e $how_many $each)'/'
    end
    set body $body$dir
    printf "%s" "$body"
end

function trail_path
    set initial (string match -eq $HOME $argv && echo $HOME || echo "/")
    set seg (math (count (string split "/" $argv)) - 1)
    set path (string replace "$initial" "" "$argv")
    set last_path (string match -r '.*/(.*)' $path)
    set body
    if [ $seg -gt 1 ]
        set body "$seg⇠/"$last_path[2]
    else
        set body "$path"
    end
    printf "%s" "$body"
end

function middle_path
    set initial (string match -eq "$HOME" "$argv" && echo "$HOME" || echo "")
    set path (string replace "$initial" "" "$argv")
    set first (string match -r '^/?(.*?)/' $path)
    set last (string match -r '.*/(.*)$' $path)

    [ -z "$first[2]" ] && [ -z "$last[2]" ] && set body ''
    [ -n "$first[2]" ] && [ -z "$last[2]" ] && set body "$first[2]"
    [ -z "$first[2]" ] && [ -n "$last[2]" ] && set body "$last[2]"
    [ -n "$first[2]" ] && [ -n "$last[2]" ] && set body "$first[2]󰇘$last[2]"
    
    printf "%s" "$body"
end

function cycle_path
    set -q svp_cycle_path && set -g svp_cycle_path (math $svp_cycle_path + 1) || set -g svp_cycle_path 1
    set path_style (get_key_value $svp_cycle_path $svish_style_map)
    [ -z "$path_style" ] && set svp_cycle_path 1
    set path_style (string split ':' (get_key_value $svp_cycle_path $svish_style_map))
    set fn $path_style[2]
    printf "%s" (call $fn (pwd))
end

function svish_directory_cleanup
    set -e -g directory_decorator
end
